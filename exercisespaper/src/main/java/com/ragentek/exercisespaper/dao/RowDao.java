package com.ragentek.exercisespaper.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.ragentek.exercisespaper.dao.models.Row;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROW".
*/
public class RowDao extends AbstractDao<Row, Long> {

    public static final String TABLENAME = "ROW";

    /**
     * Properties of entity Row.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PageId = new Property(1, Long.class, "pageId", false, "PAGE_ID");
        public final static Property Row = new Property(2, int.class, "row", false, "ROW");
        public final static Property Index = new Property(3, int.class, "index", false, "INDEX");
    }

    private Query<Row> page_RowsQuery;

    public RowDao(DaoConfig config) {
        super(config);
    }
    
    public RowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PAGE_ID\" INTEGER NOT NULL ," + // 1: pageId
                "\"ROW\" INTEGER NOT NULL ," + // 2: row
                "\"INDEX\" INTEGER NOT NULL );"); // 3: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Row entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageId());
        stmt.bindLong(3, entity.getRow());
        stmt.bindLong(4, entity.getIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Row entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageId());
        stmt.bindLong(3, entity.getRow());
        stmt.bindLong(4, entity.getIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Row readEntity(Cursor cursor, int offset) {
        Row entity = new Row( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // pageId
            cursor.getInt(offset + 2), // row
            cursor.getInt(offset + 3) // index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Row entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPageId(cursor.getLong(offset + 1));
        entity.setRow(cursor.getInt(offset + 2));
        entity.setIndex(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Row entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Row entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Row entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rows" to-many relationship of Page. */
    public List<Row> _queryPage_Rows(Long pageId) {
        synchronized (this) {
            if (page_RowsQuery == null) {
                QueryBuilder<Row> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PageId.eq(null));
                page_RowsQuery = queryBuilder.build();
            }
        }
        Query<Row> query = page_RowsQuery.forCurrentThread();
        query.setParameter(0, pageId);
        return query.list();
    }

}
